function myEncodeURI(a) {
    a = a.replace(/(^\s+)|(\s+$)/, "").replace(/_/g, "_5F").replace(/\./g, "_2E").replace(/\+/g, "_2B").replace(/\//g, "_2F");
    return encodeURIComponent(a)
}
var _host = "";
var _dict_config = {ss: 1};
var $user_id = 1, $user_name = 1,    $user_auth = 1;
(function (a) {
    a.fn.slide = function (b) {
        var d = {slideWidth: 150, autoplay: true, duration: 15000, showSlideIndex: true};
        var b = a.extend(d, b);
        return this.each(function () {
            var r = a(this);
            var i = b;
            var j = 0;
            var f = a(".slide");
            var g = f.length;
            var n = '<object type="application/x-shockwave-flash" data="http://dict.cn/apis/output.php?id=flashID" style="width:90px;height:90px;"><param name="AllowScriptAccess" value="always"><param name="wmode" value="opaque"><param name="hasPriority" value="true"></object>';
            j = day ? day : j;

            function q() {
                j = day ? day : j;
                l(j, true);
                h(j);
                if (i.autoplay == true) {
                    p(i.duration)
                }
            }

            function l(o, s) {
                a("#slideInner").stop();
                if (s == false || i.autoplay == false || o != 0) {
                    if (o == 0 && s) {
                        a("#slideInner").css({marginLeft: i.slideWidth / 2})
                    }
                    if (o == g - 1 && !s) {
                        a("#slideInner").css({marginLeft: i.slideWidth * (-g)})
                    }
                    a("#slideInner").animate({marginLeft: i.slideWidth * (-o)}, "", "", function () {
                        h(o);
                        if (i.autoplay == true) {
                            p(i.duration)
                        }
                    })
                } else {
                    a("#slideInner").animate({marginLeft: i.slideWidth * (-g)}, "", "", function () {
                        a("#slideInner").css("marginLeft", 0);
                        h(o);
                        if (i.autoplay == true) {
                            p(i.duration)
                        }
                    })
                }
            }

            function h(o) {
                if (i.showSlideIndex == true) {
                    a("#slideIndex").text(parseInt(o + 1) + "/" + g)
                }
            }
        })
    }
})(jQuery);
var editorPath = (_host == "dict.cn" || _host == "hanyu.dict.cn") ? "http://editor.dict.cn/" : "http://test.editor.dict.cn/";
(function (h, j, a, f) {
    var k, m, b, l, i;
    var g = ("placeholder" in document.createElement("input"));
    var d;
    h(function () {
        k = h("#q");
        zHolder = k.attr("placeholder");
        m = h("#tab-list>li.dict");
        b = h("#f");
        l = h("#search, #search-btn, .search-btn");
        i = h("#sx-botton");
        if (!g) {
            var o = zHolder;
            var q = k.val();
            if (!q) {
                k.val(o).removeClass("focus").addClass("blur")
            } else {
                if (o == q) {
                    k.removeClass("focus").addClass("blur")
                }
            }
        }
        var n = k.inputPrompt({
            driver: "dict",
            width: k.outerWidth(),
            trigger: h("#sugg-trigger"),
            onchoose: function (r) {
                if (n[0]) {
                    n[0].driver.query(r)
                }
            }
        });
        try {
            h("#kw").focus().select()
        } catch (p) {
        }
    })
})(jQuery, window, document);

(function (e, i, a, b) {
    var c = {
        drivers: ["dict", "juhai", "hanyu", "abbr", "shh", "gdh", "ename"],
        url: "http://dict.cn/apis/suggestion.php",
        height: 320,
        driver: "dict",
        inline: true,
        focusOnKeypress: false
    };
    var h = {};
    h.proto = {
        hasSugg: true,
        data: {},
        add: function (k) {
            var l = this;
            if (k && k.q && k.s) {
                l.data[k.q] = k.s;
                return true
            } else {
                return false
            }
        },
        cached: function (k) {
            return (this.data && this.data[k])
        },
        getList: function (l, u) {
            var s = this;
            var t = s.data[l];
            if (e.isArray(t) && t.length > 0) {
                var k = new RegExp("(" + l + ")", "ig");
                var o = "";
                if (u) {
                    for (var n = 0, m = t.length; n < m; n++) {
                        var p = t[n].g.replace(k, "<b>$1</b>");
                        o += '<dl data="' + t[n].g + '"><dt>' + p + "&nbsp;&nbsp;&nbsp;&nbsp;<span>" + t[n].e + "</span></dt><dd></dd></dl>"
                    }
                } else {
                    for (var n = 0, m = t.length; n < m; n++) {
                        var p = t[n].g.replace(k, "<b>$1</b>");
                        o += '<dl data="' + t[n].g + '"><dt>' + p + "</dt><dd>" + t[n].e + "</dd></dl>"
                    }
                }
                return o
            } else {
                return false
            }
        },
        query: function (l) {
            window.open("http://dict.cn/" + myEncodeURI(l),'_blank')
       }
    };
    var d = function () {
        var k = this;
        k.init.apply(k, arguments)
    };

    function j(l) {
        if (typeof l == "string") {
            l = e.trim(l);
            var k = l.substr(0, 1);
            if (k == "+" || k == "-") {
                return parseInt(l)
            } else {
                return false
            }
        } else {
            return false
        }
    }
    d.prototype = {
        q: null,
        driver: h.proto,
        options: {},
        list: null,
        ctrlbar: null,
        container: null,
        disabled: false,
        listHeight: 0,
        containerHeight: 0,
        repositionTimer: 0,
        showing: false,
        forbidKeycodes: [13, 27, 37, 38, 39, 40],
        hoverMutex: false,
        init: function (x) {
            var r = this;
            x = e.extend(c, x);
            r.options = x;
            if (e.inArray(x.driver, x.drivers) == -1) {
                return
            }
            var l = x.driver;
                x.driver = "dict";
                r.driver = h.proto
            var t = e(x.input);
            if (t.length < 1) {
                return
            }
            t.bind("keyup", {
                self: r
            }, r._keyup).bind("keydown", function (z) {
                r.hoverMutex = true;
                if (!r.showing && z.which != 40) {
                    return
                }
                switch (z.which) {
                    case 38:
                        r.moveup();
                        break;
                    case 40:
                        if (!r.showing) {
                            var y = t.val();
                            if (y) {
                                r.showPrompt(y)
                            }
                        }
                        r.movedown();
                        break
                }
            }).bind("keypress", function (y) {
                if (y.which == 13 && !e.trim(t.val()).length) {
                    return false
                }
            });
            var q = function (A) {
                if (!A.ctrlKey && (A.target != t.get(0) && A.target.tagName != "TEXTAREA" && A.target.tagName != "INPUT")) {
                    var z = A.which;
                    if (!A.ctrlKey && (z > 64 && z < 91)) {
                        t.focus();
                        if (!A.shiftKey) {
                            z += 32
                        }
                        t.val(String.fromCharCode(z)).trigger("keyup");
                        if (t.setSelectionRange) {
                            t.focus();
                            t.setSelectionRange(1, 1)
                        } else {
                            if (t.createTextRange) {
                                var y = t.createTextRange();
                                y.collapse(true);
                                y.moveEnd("character", 1);
                                y.moveStart("character", 1);
                                y.select()
                            }
                        }
                    } else {
                        if (z == 32) {
                            t.focus().select()
                        } else {
                            if (z == 27) {
                                t.focus().select();
                                t.val("")
                            }
                        }
                    }
                }
            };
            if (x.focusOnKeypress) {
                if (x.focusOnKeypress === true) {
                    e(a).keyup(q)
                } else {
                    e(x.focusOnKeypress).keyup(q)
                }
            }
            r.container = e('<div class="input-prompt-container"></div>');
            r.list = e('<div class="input-prompt-list"></div>');
            r.ctrlbar = e('<div class="input-prompt-ctrl"></div>');
            e(function () {
                var y = Math.max.apply(null, e.map(e("body > *"), function (z, A) {
                    if (e(z).css("position") == "absolute") {
                        return parseInt(e(z).css("z-index")) || 99
                    } else {
                        return 0
                    }
                }));
                r.container.css({
                    zIndex: y + 99
                })
            });
            var o;
            var k;
            if (x.width) {
                o = j(x.width);
                if (o !== false) {
                    k = t.width() + o
                } else {
                    k = x.width - 2
                }
            } else {
                k = t.width() - 2
            }
            var u = x.height;
            var p = t.offset();
            var s;
            var m = p.top + t.outerHeight();
            if (x.top) {
                o = j(x.top);
                if (o !== false) {
                    s = m + o
                } else {
                    s = x.top
                }
            } else {
                s = m
            }
            s++;
            if (navigator.userAgent.indexOf("MSIE") != -1) {
                s += 5
            }
            var n;
            if (x.left) {
                o = j(x.left);
                if (o !== false) {
                    n = p.left + o
                } else {
                    n = x.left
                }
            } else {
                n = p.left
            }
            r.list.css({
                overflowX: "hidden",
                overflowY: "auto"
            });
            r.containerHeight = u;
            r.listHeight = u;
            r.container.width(k).height(u).append(r.list).css({
                "z-index": "1",
                position: "absolute",
                top: s,
                left: n
            }).hide().prependTo(a.body);
            e(window).bind("resize", function () {
                r.reposition()
            });
            e(x.trigger).bind("click", function () {
                t.focus();
                r.enable();
                r.query(t.val())
            })
        },
        reposition: function () {
            var k = this;
            if (k.repositionTimer) {
                clearTimeout(k.repositionTimer)
            }
            k.repositionTimer = setTimeout(function () {
                k._reposition()
            }, 200)
        },
        _reposition: function () {
            var r = this;
            var m = r.options;
            var l = e(m.input);
            var k = l.offset();
            var q;
            var p = k.top + l.outerHeight();
            if (m.top) {
                offset = j(m.top);
                if (offset !== false) {
                    q = p + offset
                } else {
                    q = m.top
                }
            } else {
                q = p
            }
            q++;
            var o;
            if (m.left) {
                offset = j(m.left);
                if (offset !== false) {
                    o = k.left + offset
                } else {
                    o = m.left
                }
            } else {
                o = k.left
            }
            var n;
            if (m.width) {
                offset = j(m.width);
                if (offset !== false) {
                    n = l.width() + offset
                } else {
                    n = l.outerWidth() - 2
                }
            } else {
                n = l.width() - 2
            }
            r.container.css({
                top: q,
                left: o,
                width: n
            })
        },
        _keyup: function (k) {
            if (!k.ctrlKey && k.which != 16 && k.which != 17) {
                var l = k.data.self;
                if (l.hoverMutex) {
                    l.hoverMutex = false
                }
                if (k.which == 13) {
                    if (e(l.options.input).val().length) {
                        l.choose(e(l.options.input).val())
                    }
                } else {
                    if (k.which == 27 && l.showing) {
                        l.hidePrompt();
                        return
                    }
                }
                if (e.inArray(k.which, l.forbidKeycodes) !== -1) {
                    return
                }
                if (!l.disabled) {
                    l.query(k.target.value)
                }
            }
        },
        query: function (k) {
            var m = this;
            m.q = k;
            k = k;
            if (m.options.driver == "dict") {
                m.options.url = "http://dict.cn/apis/suggestion.php"
            } else {
                m.options.url = "http://dict.cn/ajax/suggestion.php"
            }
            if (k && m.driver.hasSugg) {
                if (!m.driver.cached(k)) {
                    var l = (window.location.href == "dict.cn") ? "json" : "jsonp";
                    e.ajax({
                        url: m.options.url,
                        type: "GET",
                        cache: true,
                        dataType: l,
                        data: {
                            q: k,
                            dict: m.options.driver,
                            s: m.options.driver,
                            lt: 'zh-cn'
                        },
                        success: function (n) {
                            if (m.driver.add(n)) {
                                m.showPrompt(k)
                            }
                        }
                    })
                } else {
                    m.showPrompt(k)
                }
            } else {
                m.hidePrompt()
            }
        },
        movedown: function () {
            var n = this;
            var k = n.list.children("[data]");
            var m = k.filter(".hover");
            var l;
            if (m.length < 1) {
                l = k.eq(0)
            } else {
                l = m.next()
            }
            if (l.length > 0) {
                m.removeClass("hover");
                l.addClass("hover");
                n.scrollIntoView(l)
            }
        },
        moveup: function () {
            var m = this;
            m.hoverMutex = true;
            var l = this.list.children(".hover");
            if (l.length > 0) {
                var k = l.prev();
                if (k.length > 0) {
                    l.removeClass("hover");
                    k.addClass("hover");
                    m.scrollIntoView(k)
                }
            }
        },
        scrollIntoView: function (o) {
            var r = this;
            var p = o.attr("data");
            e(r.options.input).val(p);
            if (o.length > 0) {
                var l = r.list.innerHeight();
                var n = r.list.position();
                var m = o.outerHeight();
                var q = o.position();
                var k = 0;
                if (q.top < n.top) {
                    k = q.top - n.top
                } else {
                    if (q.top + m > n.top + l) {
                        k = (q.top + m) - (n.top + l)
                    }
                }
                if (k !== 0) {
                    r.list.scrollTop(r.list.scrollTop() + k)
                }
            }
        },
        hidePrompt: function () {
            this.container.hide();
            this.showing = false
        },
        attachListBar: function () {
            var l = this;
            var k = l.list.children(["data"]);
            k.css("cursor", "pointer").hover(function () {
                if (!l.hoverMutex) {
                    l.restoreInput();
                    k.removeClass("hover");
                    e(this).addClass("hover")
                }
            }, function () {
                if (!l.hoverMutex) {
                    e(this).removeClass("hover")
                }
            }).click(function () {
                l.choose(e(this).attr("data"))
            })
        },
        showPrompt: function (l) {
            var m = this;
            m._reposition();
            var k = m.driver.getList(l, m.options.inline);
            if (k) {
                m.list.height("auto");
                m.list.html(k);
                m.attachListBar();
                m.container.show();
                if (m.list.height() >= m.listHeight) {
                    m.list.height(m.listHeight).scrollTop(0);
                    m.container.height(m.containerHeight)
                } else {
                    m.list.height("auto");
                    m.container.height("auto")
                }
                this.showing = true;
                return true
            } else {
                m.list.html("");
                m.hidePrompt();
                return false
            }
        },
        restoreInput: function () {
            var k = this;
            if (k.q) {
                e(k.options.input).val(k.q)
            }
        },
        choose: function (k) {
            var l = this;
            if (e.isFunction(l.options.onchoose)) {
                l.options.onchoose(k)
            }
            l.hidePrompt()
        },
        attemptHide: function (k) {
            var m = this;
            if (m.showing) {
                var l = m.container.get(0);
                if (!e.contains(l, k) && (m.options.trigger && e(m.options.trigger).get(0) != k) && k != e(m.options.input).get(0)) {
                    m.hidePrompt()
                }
            }
        },
        enable: function () {
            var k = this;
            if (k.disabled) {
                unsetCookie("suggOff");
                k.disabled = false
            }
        },
        setDriver: function (k) {
            var m = this;
            var l = g(k);
            if (l) {
                m.driver = l;
                m.options.driver = k
            } else {
                m.driver = h.proto;
                m.options.driver = k
            }
        }
    };
    var f = [];
    e.fn.inputPrompt = function (l) {
        var k = [];
        this.each(function () {
            var m = this;
            k.push(new d(e.extend(l, {
                input: m
            })))
        });
        f = f.concat(k);
        return k
    };
    return f
})(jQuery, window, document);
