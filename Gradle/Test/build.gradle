description = '描述信息：Test为所有 task 自定义测试'

//它定义了一个叫做 hello 的任务
//输入 gradle -q hello 来执行构建脚本
task hello {
    doLast {
        println 'Hello World!'
    }
}

//它定义了一个叫做 hello2 的任务
//doLast 被替换成了 <<. 它们有一样的功能
//The Task.leftShift(Closure) method has been deprecated and is
// scheduled to be removed in Gradle 5.0.
// Please use Task.doLast(Action) instead.
task hello2 {
    doLast {
        println 'Hello World 2 !'
    }
}

//gradle -q upper 命令的输出
task upper {
    doLast {
        String str = 'mY-NaMe'
        println "Original: " + str
        println "Upper case: " + str.toUpperCase()
    }
}

task count {
    doLast {
        6.times { print "$it " }
    }
}

//申明任务之间的依赖关系
//intro 依赖于 hello, 所以执行 intro 的时候 hello 命令会被优先执行来作为启动 intro 任务的条件.
task intro(dependsOn: hello) {
    doLast {
        println "I'm Gradle"
    }
}

//在加入一个依赖之前, 这个依赖的任务不需要提前定义
//Lazy dependsOn - 其他的任务还没有存在
task taskX1(dependsOn: 'taskY') {
    doLast {
        println 'taskX'
    }
}
task taskY1 {
    doLast {
        println 'taskY'
    }
}

//动态的创建一个任务
4.times { counter ->
    task "task$counter" {
        doLast {
            println "I'm task number $counter"
        }
    }
}
//加入一个依赖
task0.dependsOn task2, task3

//给一个已经存在的任务加入行为
task hello3 {
    doLast {
        println 'Hello Earth'
    }
}
hello3.doFirst {
    println 'Hello Venus'
}
hello3.doLast {
    println 'Hello Mars'
}
hello3 {
    doLast {
        println 'Hello Jupiter'
    }
}

//当成构建脚本的属性来访问一个任务
task hello4 {
    doLast {
        println 'Hello world!'
    }
}
hello4.doLast {
    println "Greetings from the $hello4.name task."
}

//给任务加入自定义属性
task myTask {
    ext.myProperty = "myValue"
    ext.ok = "ok"
}

task printTaskProperties {
    doLast {
        println myTask.myProperty
        println myTask.ok
    }
}

//使用 AntBuilder 来执行 ant.loadfile 任务
task loadfile {
    doLast {
        def files = file('antLoadfileResources').listFiles().sort()
        files.each { File file ->
            if (file.isFile()) {
                ant.loadfile(srcFile: file, property: file.name)
                println " *** $file.name ***"
                println "${ant.properties[file.name]}"
            }
        }
    }
}

//使用方法组织脚本逻辑
task checksum {
    doLast {
        fileList('../antLoadfileResources').each { File file ->
            ant.checksum(file: file, property: "cs_$file.name")
            println "$file.name Checksum: ${ant.properties["cs_$file.name"]}"
        }
    }
}

task loadfile2 {
    doLast {
        fileList('../antLoadfileResources').each { File file ->
            ant.loadfile(srcFile: file, property: file.name)
            println "I'm fond of $file.name"
        }
    }
}

File[] fileList(String dir) {
    file(dir).listFiles({ file -> file.isFile() } as FileFilter).sort()
}

//定义默认任务

defaultTasks 'clean', 'run'

/*task clean { doLast{}
    println 'Default Cleaning!'
}*/

task run {
    doLast {
        println 'Default Running!'
    }
}

task other {
    doLast {
        println "I'm not a default task!"
    }
}

//根据选择的任务产生不同的输出

task distribution {
    doLast {
        println "We build the zip with version=$version"
    }
}

task release(dependsOn: 'distribution') {
    doLast {
        println 'We release now'
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(release)) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}

//多任务调用

task compile {
    doLast {
        println 'compiling source --- >>> 1 --- >>>'
    }
}

task compileTest(dependsOn: compile) {
    doLast {
        println 'compiling unit tests  --- >>> 2 --- >>>'
    }
}

task test1(dependsOn: [compile, compileTest]) {
    doLast {
        println 'running unit tests --- >>> 3 --- >>>'
    }
}
//gradle dist -x test1  排除任务
//--continue 失败后继续执行构建
task dist(dependsOn: [compile, test1]) {
    doLast {
        println 'building the distribution --- >>> 4 --- >>>'
    }
}

//局部变量
def dest = "dest yaya"

task copy {
    doLast {
        println dest
    }
}

// 使用扩展属性
ext {
    springVersion1 = "3.1.0.RELEASE"
    emailNotification = "build@master.org"
}

sourceSets.all { ext.purpose = null }

sourceSets {
    main {
        purpose = "production"
    }
    test {
        purpose = "test"
    }
    plugin {
        purpose = "production"
    }

}

task printProperties {
    doLast {
        println springVersion1
        println emailNotification
        sourceSets.matching { it.purpose == "production" }.each { println it.name }
    }
}
