apply plugin: 'java'
apply plugin: 'groovy'
//configuration.runtime.each { File f -> println f }
//Groovy 自动将一个属性的引用转换为相应的 getter 或 setter 方法.
// 使用 getter 方法
println project.buildDir
println getProject().getBuildDir()

// 使用 setter 方法
project.buildDir = 'target'
getProject().setBuildDir('target')

//在调用方法时，圆括号可有可无，是个可选的.
test.systemProperty 'some.prop', 'value'
test.systemProperty('some.prop', 'value')

//List 和 Map 集合
// List 集合
test.includes = ['org/gradle/api/**', 'org/gradle/internal/**']

List<String> list = new ArrayList<String>()
list.add('org/gradle/api/**')
list.add('org/gradle/internal/**')
test.includes = list
println list

// Map 集合
Map<String,String> map = [key1:'value1', key2:'valu2']
// Groovy 会强制将Map的键值对转换为只有value的映射
println map.key1

//闭包作为方法的最后一个参数
repositories {
    println "in a closure  1"
}
repositories() { println "in a closure  2" }
repositories({println "in a closure  3" })

//闭合委托对象
dependencies {
    assert delegate == project.dependencies
    testCompile('junit:junit:4.11')
    delegate.testCompile('junit:junit:4.11')
}